# Ajustado a partir de 01:32:30
# A partir de 01:55:18 começou a falar do "dotenv" .env. E 01:56:04 baixar a biblioteca.
# npm i dotenv -D
# A partir de 02:54:15 vimos que o uso do .env e a inclusão dele no .gitignore quebrou a pipeline
# A partir de 03:01:25 vamos melhorar o "Criar .env", utilizar as variáveis dinâmicas do Github Actions.
# Ocultar alterações da branch atual, git stash. Volta para a branch desejada (exemplo: main).
# Após o comando: Saved working directory and index state WIP on branch-que-estava: cod_branch texto do commit da branch-que-estava
# Retornar os arquivos ocultados: git stash apply e git branch
#


name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: ✅ Checkout repository
      uses: actions/checkout@v4

    - name: 📝 Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: ⚙️ Instalar dependências
      run: npm install

    - name: 🧪 Executar testes de API Rest via controller
      run: npm run test-rest-controller
    
    # - name: 🧪 Executar testes de API GraphQl via controller
    #  run: npm run test-graphql-external

    - name: ▶️ Subir as API Rest
      run: npm run start-rest &

    - name: ▶️ Subir a API GraphQL
      run: npm run start-graphql &

    - name: ⏳ Esperar as APIs estarem funcionando
      run: sleep 8  # segundos

    #- name: Criar .env
    #  run: |
    #    echo "BASE_URL_REST = http://localhost:3000" >> .env
    #    echo "BASE_URL_GRAPHQL = http://localhost:4000/graphql" >> .env

    - name: Criar .env
      run: |
        echo "BASE_URL_REST = ${{ secrets.BASE_URL_REST }}" >> .env
        echo "BASE_URL_GRAPHQL = ${{ secrets.BASE_URL_GRAPHQL }}" >> .env

    - name: 🧪 Executar testes External de API Rest via HTTP
      run: npm run test-rest-external

    - name: 🧪 Executar testes External de API GraphQL via HTTP
      run: npm run test-graphql-external